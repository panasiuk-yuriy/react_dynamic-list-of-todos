{"version":3,"sources":["api/api.ts","Todolist.tsx","Buttons.tsx","App.tsx","index.tsx"],"names":["URL","getTodos","a","fetch","then","response","json","todosData","usersData","map","todo","userInfo","find","user","userId","id","name","BUTTONS","text","TodoList","todos","className","key","title","completed","Buttons","sortByFilter","button","type","onClick","event","App","useState","todosList","setTodos","isLoading","setIsLoading","isVisible","setIsVisible","data","finally","currentTarget","sort","b","localeCompare","ReactDOM","render","document","getElementById"],"mappings":"ySAAMA,EAAM,wCAaCC,EAAQ,uCAAG,8BAAAC,EAAA,sEATfC,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAQP,cAChBC,EADgB,gBAJfJ,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGP,cAEhBE,EAFgB,yBAKfD,EAAUE,KAAI,SAACC,GACpB,IAAMC,EAAWH,EAAUI,MAAK,SAACC,GAAD,OAAgBH,EAAKI,SAAWD,EAAKE,MAErE,OAAO,2BACFL,GADL,IAEEG,KAAMF,EAASK,WAVG,2CAAH,qDAeRC,EAAU,CACrB,CACED,KAAM,QACNE,KAAM,kBAER,CACEF,KAAM,OACNE,KAAM,iBAER,CACEF,KAAM,YACNE,KAAM,uBCjCGC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAAKC,UAAU,mBACZD,EAAMX,KAAI,SAAAC,GAAI,OACb,yBACEY,IAAKZ,EAAKK,GACVM,UAAU,QAEV,uBAAGA,UAAU,cACVX,EAAKa,OAER,uBAAGF,UAAU,aAAaX,EAAKG,MAC9BH,EAAKc,UACF,uBAAGH,UAAU,kBAAb,aACA,uBAAGA,UAAU,kBAAb,oBCbDI,EAA2B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACzC,OACE,yBAAKL,UAAU,WACZJ,EAAQR,KAAI,SAAAkB,GAAM,OACjB,4BACEN,UAAU,SACVO,KAAK,SACLZ,KAAMW,EAAOX,KACba,QAAS,SAACC,GAAD,OAAWJ,EAAaI,KAEhCH,EAAOT,WCoDHa,EA/DH,WAAO,IAAD,EACcC,mBAAiB,IAD/B,mBACTC,EADS,KACEC,EADF,OAEkBF,oBAAkB,GAFpC,mBAETG,EAFS,KAEEC,EAFF,OAGkBJ,oBAAkB,GAHpC,mBAGTK,EAHS,KAGEC,EAHF,KAiChB,OACE,yBAAKjB,UAAU,aACb,sDACEgB,GAEI,4BACET,KAAK,SACLP,UAAU,SACVQ,QApCM,WAChBO,GAAa,GACbE,GAAa,GACbrC,IACGG,MAAK,SAACmC,GAAD,OAAUL,EAASK,MACxBC,SAAQ,WACPJ,GAAa,QA2BT,cAQLD,EACG,yBAAKd,UAAU,WACdgB,GAEC,oCACE,kBAAC,EAAD,CACEX,aArCO,SAACI,GAA0C,IACtDd,EAASc,EAAMW,cAAfzB,KAER,OAAQA,GACN,IAAK,QACL,IAAK,OACHkB,EAAS,YAAID,GACVS,MAAK,SAACxC,EAAGyC,GAAJ,OAAUzC,EAAEc,GAAM4B,cAAcD,EAAE3B,QAC1C,MACF,IAAK,YACHkB,EAAS,YAAID,GACVS,MAAK,SAACxC,EAASyC,GAAV,OAAuBzC,EAAEsB,WAAamB,EAAEnB,kBA4B1C,kBAAC,EAAD,CAAUJ,MAAOa,OCxD/BY,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0241410c.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com/';\n\n\nconst responseTodos = () => {\n  return fetch(`${URL}todos`)\n    .then(response => response.json());\n};\n\nconst responseUsers = () => {\n  return fetch(`${URL}users`)\n    .then(response => response.json());\n};\n\nexport const getTodos = async () => {\n  const todosData = await responseTodos();\n  const usersData = await responseUsers();\n\n\n  return todosData.map((todo: Todo) => {\n    const userInfo = usersData.find((user: User) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      user: userInfo.name,\n    };\n  });\n};\n\nexport const BUTTONS = [\n  {\n    name: 'title',\n    text: ' Sort by Title',\n  },\n  {\n    name: 'user',\n    text: ' Sort by Name',\n  },\n  {\n    name: 'completed',\n    text: ' Sort by Completed',\n  },\n];\n","import React from 'react';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <div className=\"todos_container\">\n      {todos.map(todo => (\n        <div\n          key={todo.id}\n          className=\"todo\"\n        >\n          <p className=\"todo_title\">\n            {todo.title}\n          </p>\n          <p className=\"todo_user\">{todo.user}</p>\n          {todo.completed\n            ? <p className=\"todo_completed\">completed</p>\n            : <p className=\"todo_inprocess\">in process</p>}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { MouseEvent } from 'react';\nimport { BUTTONS } from './api/api';\n\ntype Props = {\n  sortByFilter: (arg: MouseEvent<HTMLButtonElement>) => void;\n};\n\nexport const Buttons: React.FC<Props> = ({ sortByFilter }) => {\n  return (\n    <div className=\"buttons\">\n      {BUTTONS.map(button => (\n        <button\n          className=\"button\"\n          type=\"button\"\n          name={button.name}\n          onClick={(event) => sortByFilter(event)}\n        >\n          {button.text}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React, { useState, MouseEvent } from 'react';\nimport './App.css';\nimport { getTodos } from './api/api';\nimport { TodoList } from './Todolist';\nimport { Buttons } from './Buttons';\n\nconst App = () => {\n  const [todosList, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const loadTodos = () => {\n    setIsLoading(true);\n    setIsVisible(true);\n    getTodos()\n      .then((data) => setTodos(data))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const sortByColumn = (event: MouseEvent<HTMLButtonElement>) => {\n    const { name } = event.currentTarget;\n\n    switch (name) {\n      case 'title':\n      case 'user':\n        setTodos([...todosList]\n          .sort((a, b) => a[name].localeCompare(b[name])));\n        break;\n      case 'completed':\n        setTodos([...todosList]\n          .sort((a: Todo, b: Todo) => +a.completed - +b.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Dynamic list of TODOs</h1>\n      {!isVisible\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={loadTodos}\n            >\n              Load Todos\n            </button>\n          )}\n      {isLoading\n        ? <div className=\"loader\" />\n        : (isVisible\n          && (\n            <>\n              <Buttons\n                sortByFilter={sortByColumn}\n              />\n              <TodoList todos={todosList} />\n            </>\n          )\n        )}\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}